# This example demonstrates the use of a git repo as a hard-wired input artifact.
# The argo repo is cloned to its target destination at '/src' for the main container to consume.
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: minio
spec:
  entrypoint: install
  arguments:
    parameters:
    - name: destName
    - name: appRevision
    - name: rootAccessKey
    - name: rootSecretKey
  templates:  
    - name: install
      inputs:
        parameters:
        #- name: destName
        #- name: appRevision
        - name: rootAccessKey
          value: "{{inputs.parameters.rootAccessKey}}"
        - name: rootSecretKey
          value: "{{inputs.parameters.rootSecretKey}}"
        - name: appName
          value: "seed-minio"
        - name: appPath
          value: "charts/argocd-minio/"
        - name: "releaseName"
          value: "minio"
        - name: "destName"
          value: "{{inputs.parameters.destName}}"
        - name: "appRevision"
          value: "{{inputs.parameters.appRevision}}"       
      steps:
      - - name: mini
          arguments:
            parameters:
              - name: appName
                value: "{{inputs.parameters.appName}}"
              #  value: "seed-minio"
              - name: appPath
                value: "{{inputs.parameters.appPath}}"
              #  value: "charts/argocd-minio/"
              - name: "releaseName"
                value: "{{inputs.parameters.releaseName}}"
              #  value: "minio"
              - name: "destName"
                value: "{{inputs.parameters.destName}}"              
              #  value: "{{inputs.parameters.destName}}"
              - name: "appRevision"
                value: "{{inputs.parameters.appRevision}}"
              #  value: "{{inputs.parameters.appRevision}}"

              #  value: minio
              - name: "appCreateExtraArgs"
                value: "--helm-set source.helm.parameters[0].name=accessKey --helm-set source.helm.parameters[0].value={{inputs.parameters.rootAccessKey}} --helm-set source.helm.parameters[1].name=secretKey --helm-set source.helm.parameters[1].value={{inputs.parameters.rootSecretKey}}"        
          templateRef:
             name: app-create
             template: install  

      - - name: wait-for-minio
          template: wait-minio

      #- - name: bootstrap-the-minio
      #    template: bootstrap-minio
      #    arguments:
      #      parameters:
      #        - name: AWS_ACCESS_KEY_ID
      #          value: "{{inputs.parameters.rootAccessKey}}"
      #        - name: AWS_SECRET_ACCESS_KEY
      #          value: "{{inputs.parameters.rootAccessKey}}"


    - name: bootstrap-minio
      templateRef:
         name: apps-minio-bootstrap
         template: bootstrap  
      arguments:
        parameters:
          - name: AWS_ACCESS_KEY_ID
            value: "{{inputs.parameters.rootAccessKey}}"
          - name: AWS_SECRET_ACCESS_KEY
            value: "{{inputs.parameters.rootAccessKey}}"

    - name: wait-minio
      resource:
        action: get
        successCondition: status.readyReplicas > 0
        failureCondition: status.availableReplicas == 0
        manifest: |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            namespace: minio
            name: minio