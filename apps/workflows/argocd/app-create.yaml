# This example demonstrates the use of a git repo as a hard-wired input artifact.
# The argo repo is cloned to its target destination at '/src' for the main container to consume.
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: create
spec:
  entrypoint: create
  arguments:
    parameters:
    - name: appName
    - name: appRepo
    - name: appPath
    - name: appNamespace
    - name: appRevision
    - name: appCreateExtraArgs
    - name: destName
  templates:  
  - name: create
    inputs:
      parameters:
      - name: appName
        value: "{{inputs.parameters.appName}}"
      - name: appRepo
        value: "{{inputs.parameters.appRepo}}"
      - name: appPath
        value: "{{inputs.parameters.appPath}}"
      - name: appNamespace
        value: "{{inputs.parameters.appNamespace}}"
      - name: appRevision
        value: "{{inputs.parameters.appRevision}}"
      - name: appCreateExtraArgs
        value: "{{inputs.parameters.appCreateExtraArgs}}"
      - name: destName
        value: "{{inputs.parameters.destName}}"        
        
    container:
      image: argoproj/argocd:v1.8.4 #TODO: switch to smaller one
      command: [sh, -c]
      #args: ["argocd app get {{inputs.parameters.appName}} --insecure -ojson > /mnt/out/app.json"]
      args: ["argocd app create {{inputs.parameters.appName}} --auth-token $ARGOCD_AUTH_TOKEN --server $ARGOCD_SERVER --insecure --repo {{inputs.parameters.appRepo}} --path {{inputs.parameters.appPath}} --dest-namespace {{inputs.parameters.appNamespace}} {{inputs.parameters.appCreateExtraArgs}} --revision {{inputs.parameters.appRevision}} --dest-name {{inputs.parameters.destName}}"]
      envFrom:
      - configMapRef:
          name: argocd-auth-info
      - secretRef:
          name: argocd-auth
