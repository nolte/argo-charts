# This example demonstrates the use of a git repo as a hard-wired input artifact.
# The argo repo is cloned to its target destination at '/src' for the main container to consume.
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: set-token
spec:
  entrypoint: token
  arguments:
    parameters:
    - name: token
    - name: secretName
    - name: namespace
  templates:  
  - name: token
    inputs:
      parameters:
      - name: namespace
        value: "{{workflow.parameters.namespace}}"      
      - name: token
        value: "{{workflow.parameters.token}}"
      - name: secretName
        value: "{{workflow.parameters.secretName}}"
    resource:                   # indicates that this is a resource template
      action: apply            # can be any kubectl action (e.g. create, delete, apply, patch)
      # The successCondition and failureCondition are optional expressions.
      # If failureCondition is true, the step is considered failed.
      # If successCondition is true, the step is considered successful.
      # They use kubernetes label selection syntax and can be applied against any field
      # of the resource (not just labels). Multiple AND conditions can be represented by comma
      # delimited expressions.
      # For more details: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
      #successCondition: status.succeeded > 0
      #failureCondition: status.failed > 3
      manifest: |               #put your kubernetes spec here
        apiVersion: v1
        kind: Secret
        metadata:
          name: {{inputs.parameters.secretName}}
          namespace: {{inputs.parameters.namespace}}
        type: Opaque
        data:
          ARGOCD_AUTH_TOKEN: "{{inputs.parameters.token}}"