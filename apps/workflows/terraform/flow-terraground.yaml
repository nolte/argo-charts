# This example demonstrates the use of a git repo as a hard-wired input artifact.
# The argo repo is cloned to its target destination at '/src' for the main container to consume.
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: flow
spec:
  entrypoint: apply
  arguments:
    parameters:
    - name: repo
    - name: path
    - name: revision
      value: master
    - name: AWS_S3_ENDPOINT
      value: http://minio.minio.svc:9000
    - name: AWS_ACCESS_KEY_ID
    - name: AWS_SECRET_ACCESS_KEY
  templates:  
  - name: apply
    inputs:
      artifacts:
      - name: argo-source
        path: "{{workflow.parameters.path}}"
        git:
          repo: "{{workflow.parameters.repo}}"
          revision: "{{workflow.parameters.revision}}"
    container:
      image: alpine/terragrunt
      command: [sh, -c]
      args: ["env && terragrunt apply -input=false -auto-approve -no-color -compact-warnings && terragrunt output -json"]
      workingDir: "{{workflow.parameters.path}}/{{workflow.parameters.path}}"
      env:
        - name: AWS_S3_ENDPOINT
          value: "{{workflow.parameters.AWS_S3_ENDPOINT}}"
        - name: AWS_ACCESS_KEY_ID
          value: "{{workflow.parameters.AWS_ACCESS_KEY_ID}}"
        - name: AWS_SECRET_ACCESS_KEY
          value: "{{workflow.parameters.AWS_SECRET_ACCESS_KEY}}"
      #envFrom:
      #- secretRef:
      #    name: tf-state-auth